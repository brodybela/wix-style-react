webpackJsonp([251],{1861:function(module,exports){module.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport uniqueId from 'lodash/uniqueId';\nimport RadioButton from './RadioButton/RadioButton';\nimport styles from './RadioGroup.scss';\nimport WixComponent from '../BaseComponents/WixComponent';\nimport classNames from 'classnames';\n\n/**\n * component for easy radio group creation.\n *\n * similar to HTML `<input type=\"radio\"/>` except you don't need to handle `name` or click handlers\n */\nclass RadioGroup extends WixComponent {\n  constructor(props) {\n    super(props);\n    this.name = uniqueId('RadioGroup_');\n  }\n\n  render() {\n    const {onChange, disabled, disabledRadios, value, vAlign, display, type, spacing, lineHeight} = this.props;\n    const style = display === 'vertical' ? {marginBottom: spacing} : {};\n\n    return (\n      <div className={classNames(styles[display], {[styles.buttonType]: type === 'button'})}>\n        {React.Children.map(this.props.children, radio => (\n          <RadioGroup.Radio\n            dataHook={radio.props.dataHook}\n            value={radio.props.value}\n            name={this.name}\n            onChange={onChange}\n            vAlign={vAlign}\n            type={type}\n            disabled={disabled || disabledRadios.indexOf(radio.props.value) !== -1}\n            checked={radio.props.value === value}\n            style={style}\n            icon={radio.props.icon}\n            lineHeight={lineHeight}\n            >\n            {radio.props.children}\n          </RadioGroup.Radio>\n        ))}\n      </div>\n    );\n  }\n}\n\nRadioGroup.propTypes = {\n  /** Callback function when user selects a different value */\n  onChange: PropTypes.func,\n\n  /** Selected radio button value */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** the values of the disabled radio buttons */\n  disabledRadios: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n\n  /** Positioning of the radio bottom compared to the label */\n  vAlign: PropTypes.oneOf(['center', 'top']),\n\n  /** Make the entire control disabled */\n  disabled: PropTypes.bool,\n\n  /** Decided which type of child controls to render */\n  type: PropTypes.oneOf(['default', 'button']),\n\n  /** Display direction of the radios */\n  display: PropTypes.oneOf(['vertical', 'horizontal']),\n\n  children: PropTypes.arrayOf((propValue, key) => {\n    if (propValue[key].type.name !== 'RadioButton') {\n      return new Error(`RadioGroup: Invalid Prop children was given. Validation failed on child number ${key}`);\n    }\n  }),\n\n  /** Vertical spacing between radio buttons */\n  spacing: PropTypes.string,\n\n  lineHeight: PropTypes.string\n};\n\nRadioGroup.defaultProps = {\n  disabledRadios: [],\n  onChange: () => {},\n  value: '',\n  vAlign: 'center',\n  display: 'vertical',\n  spacing: '12px',\n  lineHeight: '24px',\n  type: 'default'\n};\n\nRadioGroup.Radio = RadioButton;\n\nRadioGroup.displayName = 'RadioGroup';\n\nexport default RadioGroup;\n"}});