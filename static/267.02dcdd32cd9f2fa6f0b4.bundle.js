webpackJsonp([267],{1845:function(module,exports){module.exports="import React from 'react';\nimport {PageHeader, generateDefaultBreadcrumbs} from './PageHeader';\nimport pageHeaderDriverFactory from './PageHeader.driver';\nimport {createDriverFactory} from '../../test-common';\nimport Button from '../../Button';\n\ndescribe('PageHeader', () => {\n  const createDriver = createDriverFactory(pageHeaderDriverFactory);\n\n  it('should initialize component with title', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader title={title}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.titleText()).toBe(title);\n    expect(driver.isTitleExists()).toBeTruthy();\n    expect(driver.isSubtitleExists()).toBeFalsy();\n    expect(driver.isBreadcrumbsExists()).toBeFalsy();\n  });\n\n  it('should initialize component with minimized title', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader minimized title={title}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isTitleExists()).toBeFalsy();\n    expect(driver.isSubtitleExists()).toBeFalsy();\n    expect(driver.isBreadcrumbsExists()).toBeTruthy();\n  });\n\n  it('should initialize component with title and subtitle', () => {\n    const title = 'This is a title';\n    const subtitle = 'This is a subtitle';\n    const pageHeader = <PageHeader title={title} subtitle={subtitle}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.titleText()).toBe(title);\n    expect(driver.subtitleText()).toBe(subtitle);\n    expect(driver.isTitleExists()).toBeTruthy();\n    expect(driver.isSubtitleExists()).toBeTruthy();\n    expect(driver.isBreadcrumbsExists()).toBeFalsy();\n  });\n\n  it('should initialize component with minimized title and subtitle', () => {\n    const title = 'This is a title';\n    const subtitle = 'This is a subtitle';\n    const pageHeader = <PageHeader minimized title={title} subtitle={subtitle}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isTitleExists()).toBeFalsy();\n    expect(driver.isSubtitleExists()).toBeFalsy();\n    expect(driver.isBreadcrumbsExists()).toBeTruthy();\n  });\n\n  it('should initialize component with breadcrumbs and title', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader breadcrumbs={generateDefaultBreadcrumbs(title)} title={title}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.titleText()).toBe(title);\n    expect(driver.isTitleExists()).toBeTruthy();\n    expect(driver.isSubtitleExists()).toBeFalsy();\n    expect(driver.isBreadcrumbsExists()).toBeTruthy();\n  });\n\n  it('should initialize component with minimized breadcrumbs and title', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader minimized breadcrumbs={generateDefaultBreadcrumbs(title)} title={title}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isTitleExists()).toBeFalsy();\n    expect(driver.isSubtitleExists()).toBeFalsy();\n    expect(driver.isBreadcrumbsExists()).toBeTruthy();\n  });\n\n  it('should initialize component with breadcrumbs, title and subtitle', () => {\n    const title = 'This is a title';\n    const subtitle = 'This is a subtitle';\n    const pageHeader = <PageHeader breadcrumbs={generateDefaultBreadcrumbs(title)} title={title} subtitle={subtitle}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.titleText()).toBe(title);\n    expect(driver.subtitleText()).toBe(subtitle);\n    expect(driver.isTitleExists()).toBeTruthy();\n    expect(driver.isSubtitleExists()).toBeTruthy();\n    expect(driver.isBreadcrumbsExists()).toBeTruthy();\n  });\n\n  it('should initialize component with minimized breadcrumbs, title and subtitle', () => {\n    const title = 'This is a title';\n    const subtitle = 'This is a subtitle';\n    const pageHeader = <PageHeader minimized breadcrumbs={generateDefaultBreadcrumbs(title)} title={title} subtitle={subtitle}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isTitleExists()).toBeFalsy();\n    expect(driver.isSubtitleExists()).toBeFalsy();\n    expect(driver.isBreadcrumbsExists()).toBeTruthy();\n  });\n\n  it('should initialize component with title and actionsBar', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader title={title} actionsBar={(<Button>Action</Button>)}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isActionBarExists()).toBeTruthy();\n  });\n\n  it('should initialize component with minimized title and actionsBar', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader minimized title={title} actionsBar={(<Button>Action</Button>)}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isActionBarExists()).toBeTruthy();\n  });\n\n  it('should initialize component with title and back button without callback', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader title={title} showBackButton/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isBackButtonExists()).toBeFalsy();\n  });\n\n  it('should initialize component with title and back button callback', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader title={title} onBackClicked={() => {}}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isBackButtonExists()).toBeFalsy();\n  });\n\n  it('should initialize component with title and back button callback and back button', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader title={title} showBackButton onBackClicked={() => {}}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isBackButtonExists()).toBeTruthy();\n  });\n\n  it('should initialize component with minimized title and back button callback and back button', () => {\n    const title = 'This is a title';\n    const pageHeader = <PageHeader minimized title={title} showBackButton onBackClicked={() => {}}/>;\n    const driver = createDriver(pageHeader);\n    expect(driver.isBackButtonExists()).toBeFalsy();\n  });\n});\n"}});