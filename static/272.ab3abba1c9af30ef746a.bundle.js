webpackJsonp([272],{1840:function(module,exports){module.exports="import s from './Page.scss';\nimport React from 'react';\nimport WixComponent from '../BaseComponents/WixComponent';\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst SCROLL_TOP_THRESHOLD = 24;\n\n/**\n  * A page container which contains a header and scrollable content\n  */\nexport default class Page extends WixComponent {\n\n  constructor(props) {\n    super(props);\n\n    this._handleScroll = this._handleScroll.bind(this);\n\n    this.state = {\n      headerHeight: 0,\n      minimized: false\n    };\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n\n    this._getScrollContainer().addEventListener('scroll', this._handleScroll);\n    this.setState({\n      headerHeight: this.pageHeaderRef.offsetHeight\n    });\n  }\n\n  componentWillUnmount() {\n    super.componentWillUnmount();\n\n    this._getScrollContainer().removeEventListener('scroll', this._handleScroll);\n  }\n\n  _getScrollContainer() {\n    return this.scrollableContentRef;\n  }\n\n  _shouldBeMinimized(containerScrollTop) {\n    return containerScrollTop > SCROLL_TOP_THRESHOLD;\n  }\n\n  _handleScroll() {\n    const scrollContainer = this._getScrollContainer();\n    const containerScrollTop = scrollContainer.scrollTop;\n    const nextMinimized = this._shouldBeMinimized(containerScrollTop);\n    const {minimized} = this.state;\n\n    if (minimized !== nextMinimized) {\n      this.setState({\n        minimized: nextMinimized\n      });\n    }\n  }\n\n  _safeGetChildren(element) {\n    if (!element || !element.props || !element.props.children) {\n      return [];\n    }\n\n    return element.props.children;\n  }\n\n  render() {\n    const {headerHeight, minimized} = this.state;\n    const [headerElement, contentElement] = React.Children.toArray(this.props.children);\n    const pageHeaderClass = classNames(s.pageHeader, {[s.minimized]: minimized});\n    const pageHeaderStyle = {};\n    if (!minimized) {\n      pageHeaderStyle.paddingBottom = `${SCROLL_TOP_THRESHOLD}px`;\n    }\n\n    return (\n      <div className={s.page}>\n        <div className={s.staticBackground}/>\n        <div className={pageHeaderClass} ref={r => this.pageHeaderRef = r} style={pageHeaderStyle}>\n          {React.Children.map(this._safeGetChildren(headerElement), child => React.cloneElement(child, {minimized}))}\n        </div>\n        <div className={s.scrollableContent} ref={r => this.scrollableContentRef = r}>\n          <div className={s.contentBackground} style={{height: `${headerHeight}px`}}/>\n          {this._safeGetChildren(contentElement)}\n        </div>\n      </div>\n    );\n  }\n}\n\nPage.displayName = 'Page';\nPage.Header = Header;\nPage.Content = Content;\n\nPage.propTypes = {\n  children: PropTypes.arrayOf((propValue, key) => {\n    if (!propValue || propValue.length !== 2) {\n      return new Error(`Page: Invalid Prop children, first child must be Page.Header, and second child must be Page.Content`);\n    }\n\n    if (key === 0 && propValue[key].type !== Page.Header) {\n      return new Error(`Page: Invalid Prop children, first child must be Page.Header`);\n    }\n\n    if (key === 1 && propValue[key].type !== Page.Content) {\n      return new Error(`Page: Invalid Prop children, second child must be Page.Content`);\n    }\n  }).isRequired\n};\n"}});