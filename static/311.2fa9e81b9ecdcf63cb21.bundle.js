webpackJsonp([311],{1801:function(module,exports){module.exports="# Loader Testkits\n\n> Loader\n\n## Loader TestKit API\n\n| method | arguments | returned value | description |\n|--------|-----------|----------------|-------------|\n| hasText | - | boolean | true if the element has text |\n| getText | - | string | returns the element text |\n| getColor | - | string | returns the loader color ('blue' or 'white') |\n| isSmall | - | boolean | true when using the small loader |\n| isMedium | - | boolean | true when using the medium loader |\n| isLarge | - | boolean | true when using the large loader |\n| exists | - | boolean | fulfilled if element in the DOM |\n| setProps | json | element | returns a clone of this element with the new props from the json | \n\n## Usage Example\n\n> Unit testing example\n\n```javascript\n  import React from 'react';\n  import {loaderTestkitFactory} from 'wix-style-react/dist/testkit';\n  import {loaderTestkitFactory as enzymeLoaderTestkitFactory} from 'wix-style-react/dist/testkit/enzyme';\n\n  /***************\n   enzyme example\n  ***************/\n\n  const dataHook = 'myDataHook';\n  const wrapper = mount(<div/><Loader dataHook={dataHook}/></div>);\n  const testkit = enzymeLoaderTestkitFactory({wrapper, dataHook});\n\n  //Do tests\n  expect(testkit.exists()).toBeTruthy();\n\n  /**********************\n   ReactTestUtils example\n  **********************/\n\n  const div = document.createElement('div');\n  const dataHook = 'myDataHook';\n  const wrapper = div.appendChild(\n    ReactTestUtils.renderIntoDocument(<div/><Loader dataHook={dataHook}/></div>, {dataHook})\n  );\n  const testkit = loaderTestkitFactory({wrapper, dataHook});\n\n  //Do tests\n  expect(testkit.exists()).toBeTruthy();\n```\n> E2E example\n\n```javascript\n  //Element should be rendered with a data-hook into the DOM\n  <Loader dataHook='myDataHook'/>\n\n  /*******************\n   protractor example\n  *******************/\n\n  import {loaderTestkitFactory, waitForVisibilityOf} from 'wix-style-react/dist/testkit/protractor';\n\n  //Create an element testkit via the data-hook attribute\n  const testkit = loaderTestkitFactory({dataHook: 'myDataHook'});\n\n  browser.get(appUrl); //Your application url\n\n  waitForVisibilityOf(testkit.element(), 'Cannot find Loader')\n     .then(() => {\n        //Do tests\n        expect(testkit.element().isDisplayed()).toBeTruthy();\n     });\n\n```\n"}});