webpackJsonp([318],{1794:function(module,exports){module.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport WixComponent from '../BaseComponents/WixComponent';\nimport Languages from '../Icons/dist/components/Languages';\nimport IconWithOptions from '../IconWithOptions';\n\nexport default class LanguagePicker extends WixComponent {\n  createDividedChildren(availableOptions) {\n    const dividerChild = React.cloneElement(\n      this.props.children[0], {\n        children: '-',\n        languageKey: '-',\n        linkTo: '-'\n      });\n\n    const dividedChildren = [...availableOptions];\n    dividedChildren.forEach((_, index) => dividedChildren.splice((index * 2) + 1, 0, dividerChild));\n    dividedChildren.pop();\n\n    return dividedChildren;\n  }\n\n  createIconWithOptionsOptions(children) {\n    const availableOptions = children.filter(opt => opt.props.languageKey !== this.props.selectedId);\n    const dividedChildren = this.createDividedChildren(availableOptions);\n\n    return dividedChildren.map(languagePickerOption => {\n      const {children: languageName, languageKey, linkTo} = languagePickerOption.props;\n\n      return (\n        <IconWithOptions.Option key={languageKey} id={languageKey} linkTo={linkTo}>\n          {languageName}\n        </IconWithOptions.Option>\n      );\n    });\n  }\n\n  render() {\n    const {children, ...rest} = this.props;\n\n    return (\n      <IconWithOptions {...rest}>\n        <IconWithOptions.Icon><Languages size=\"18\"/></IconWithOptions.Icon>\n        {this.createIconWithOptionsOptions(children)}\n      </IconWithOptions>\n    );\n  }\n}\n\nLanguagePicker.displayName = 'LanguagePicker';\n\nLanguagePicker.defaultProps = {\n  itemHeight: 'big',\n  maxHeightPixels: 566\n};\n\nLanguagePicker.propTypes = {\n  ...IconWithOptions.propTypes,\n\n  /**\n    * Specify the languages list to render\n    *\n    * children __must__ be `<LanguagePicker.Option/>` component with:\n    *   * `languageKey` - string, required\n    *   * `children` - string\n    */\n  children: PropTypes.arrayOf((propValue, key) => {\n    if (propValue[key].type !== LanguagePicker.Option) {\n      return new Error(`LanguagePicker: Invalid Prop children was given. Validation failed on child number ${key}`);\n    }\n  }).isRequired\n};\n\nLanguagePicker.Option = () => null;\nLanguagePicker.Option.displayName = 'LanguagePicker.Option';\n\nLanguagePicker.Option.propTypes = {\n  languageKey: PropTypes.string.isRequired,\n  linkTo: PropTypes.string,\n  children: PropTypes.string\n};\n"}});